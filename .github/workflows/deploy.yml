name: pipeline
on:
  push:
    branches:
      - "main"
      
    # paths:
    #   - bin/**
    #   - source/**
    #   - docker-compose.yml

permissions:
  contents: read
  packages: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  PROJECT: "portfolio"

jobs:
  run-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dart-lang/setup-dart@v1

      - name: Config Flutter
        run: dart --disable-analytics
          
      - name: Install dependencies
        run: dart pub get

      - name: Analyze project source
        run: dart analyze

  build-and-push-image:
    runs-on: ubuntu-24.04-arm
    needs:
      - run-tests
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: https://ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx # For cross-platform support
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          platforms: linux/arm64
          tags: |
            ghcr.io/v4ldum/${{ env.PROJECT }}:latest
            ghcr.io/v4ldum/${{ env.PROJECT }}:${{ github.sha }}

  deploy:
    runs-on: ubuntu-latest
    needs:
      - build-and-push-image
    steps:
        # This is needed while GitHub doesn't support IPv6
      - name: Set up WARP
        uses: fscarmen/warp-on-actions@v1.3
        with:
          stack: dual        # Optional. Support [ ipv4, ipv6, dual ]. Default is dual.
          mode: client    # Optional. Support [ wireguard, client ]. Default is wireguard.

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup SSH key
        env:
          SSH_PORT: ${{ secrets.SSH_PORT }}
          SSH_SERVER: ${{ secrets.SSH_SERVER }}
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          eval $(ssh-agent -s)
          ssh-add ~/.ssh/id_ed25519 > /dev/null 2>&1
          ssh-keyscan -p "$SSH_PORT" "$SSH_SERVER" >> ~/.ssh/known_hosts

      - name: Deploy
        env:
          DOCKER_HOST: ${{ secrets.SSH_HOST }}
        run: |
          # Login to ghcr
          docker login -u V4ldum -p "${{ secrets.GITHUB_TOKEN }}" ghcr.io 
          
          # Pull new image
          docker pull ghcr.io/v4ldum/${{ env.PROJECT }}

          # Scale up container
          docker compose up -d --no-deps --scale ${{ env.PROJECT }}=2 --no-recreate ${{ env.PROJECT }}

          # Get container IDs
          OLD=$(docker ps -f "name=${{ env.PROJECT }}" --format "{{.ID}} {{.CreatedAt}}" | sort -k2 | head -n 1 | awk '{print $1}')
          NEW=$(docker ps --filter "name=${{ env.PROJECT }}" --format "{{.ID}} {{.CreatedAt}}" | sort -k2 | tail -n 1 | awk '{print $1}')

          # Wait for container to be up
          for attempt in {1..6}; do
            sleep 5
            CODE=$(docker inspect --format "{{.State.ExitCode}}" "$NEW")
            if [ "$CODE" = "0" ]; then
              break
            fi
          done

          # Scale down
          CODE=$(docker inspect --format "{{.State.ExitCode}}" "$NEW")
          if [ "$CODE" = "0" ]; then
            # Delete old and scale down if healthy
            docker container rm -f "$OLD"
            docker compose up -d --no-deps --scale ${{ env.PROJECT }}=1 --no-recreate ${{ env.PROJECT }}

            docker rename "$NEW" ${{ env.PROJECT }}
          else
            # Delete new and scale down if unhealthy
            docker logs "$NEW"
            docker container rm -f "$NEW"
            docker compose up -d --no-deps --scale ${{ env.PROJECT }}=1 --no-recreate ${{ env.PROJECT }}
            exit 1
          fi

  cleanup:
    runs-on: ubuntu-latest
    needs:
      - deploy
    steps:
      - name: Set up GitHub CLI
        run: |
          gh --version || sudo apt-get install -y gh
          gh auth login --with-token <<< "${{ secrets.GITHUB_TOKEN }}"

      - name: Fetch package versions
        id: get-versions
        run: |
          # Fetch all versions (sorted by creation date, newest first)
          versions=$(gh api \
            -H "Accept: application/vnd.github+json" \
            "/user/packages/container/${{ env.PROJECT }}/versions" \
            | jq -r 'sort_by(.created_at) | reverse | .[].id')

          # Split into "keep" and "delete" lists
          keep=$(echo "$versions" | head -n 6)
          delete=$(echo "$versions" | tail -n +$(( 6 + 1 )))

          # Set outputs for later steps
          echo "keep=$(echo $keep | jq -s -c '.')" >> $GITHUB_OUTPUT
          echo "delete=$(echo $delete | jq -s -c '.')" >> $GITHUB_OUTPUT

      - name: Delete old versions
        if: steps.get-versions.outputs.delete != '[]'
        run: |
          for version_id in $(echo "${{ steps.get-versions.outputs.delete }}" | jq -r '.[]'); do
            echo "Deleting version $version_id"
            gh api \
              -X DELETE \
              "/user/packages/container/${{ env.PROJECT }}/versions/$version_id"
          done

      - name: Log results
        run: |
          echo "Kept versions: ${{ steps.get-versions.outputs.keep }}"
          echo "Deleted versions: ${{ steps.get-versions.outputs.delete }}"

